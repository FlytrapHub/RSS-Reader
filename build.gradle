plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco' // code coverage
}

group = 'com.flytrap'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.9"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // sql-lite
    implementation 'org.xerial:sqlite-jdbc:3.43.2.2'
    implementation('org.hibernate.orm:hibernate-community-dialects:6.1.7.Final')
    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation("it.ozimov:embedded-redis:0.7.2")
    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'
    // QueryDSL
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
    // AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.17.1'
    // Swaager
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    //spring batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'org.springframework.batch:spring-batch-test'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

/* Submodule start */
processResources.dependsOn('submodules')

tasks.register('submodules', Copy) {
    description = 'Copy submodules to project'

    from('./submodules') {
        include('*.yml')
    }
    into('src/main/resources')
}

tasks.named('test') {
    useJUnitPlatform()
}

/* Jacoco */
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification { // TODO test coverage check
    def Qdomains = []
    for (qPattern in "*.QA".."*.QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
        Qdomains.add(qPattern + "*")
    }
    violationRules {

        rule {
            enabled = true
//            element = 'CLASS'

            limit {
                minimum = 0.1
            }
            excludes = [
                    'com.flytrap.**.api.*',
                    'com.flytrap.**.properties.*',
                    'com.flytrap.**.exception.*',
                    'com.flytrap.**.dto.*',
                    'com.flytrap.**.output.*',
                    'com.flytrap.**.entity.*',
                    'com.flytrap.rssreader.global.**.*',
                    'com.flytrap.**.config.*',
                    'com.flytrap.**.model.*',
                    'com.flytrap.**.repository.*',
                    'com.flytrap.**.service.*ReadService',
                    'com.flytrap.**.controller.*ReadController',
                    'com.flytrap.**.controller.api.*',
                    'com.flytrap.**.**.*Builder',
                    'com.flytrap.**.**.*Resolver',
                    'com.flytrap.**.**.*Context',
                    'com.flytrap.**.**.*Event',
                    'com.flytrap.**.**.*Publisher',
                    'com.flytrap.**.RssReaderApplication',
//                    '*.test.*',
            ] + Qdomains
        }
    }
}

// QueryDSL
def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}
